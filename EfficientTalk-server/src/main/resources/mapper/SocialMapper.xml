<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ETGroup.EfficientTalkServer.mapper.SocialMapper">
	<!--获取好友列表-->
	<select id="getFriendList" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.FriendListItemDTO">
		SELECT friends.friend_id        as userId,
			   users.username           as userName,
			   users.avatar             as userAvatar,
			   users.dept_id            as deptId,
			   departments.dept_name    as deptName,
			   friend_groups.group_id   as groupId,
			   friend_groups.group_name as groupName,
			   users.online_state       as onlineState
		FROM friends
				 LEFT JOIN users ON friends.friend_id = users.id
				 LEFT JOIN departments ON users.dept_id = departments.dept_id
				 LEFT JOIN friend_groups ON friends.group_id = friend_groups.group_id
		WHERE friends.user_id = #{userId}
		ORDER BY users.username
	</select>

	<!--创建好友邀请-->
	<insert id="createFriendInvite" parameterType="com.ETGroup.EfficientTalkServer.entity.PO.FriendInvitationPO">
		INSERT INTO friend_invitations (id, user_id, friend_id, message, group_id, invite_time, handle_time, state)
		VALUES (#{id}, #{userId}, #{friendId}, #{message}, #{groupId}, #{inviteTime}, #{inviteTime}, #{state})
	</insert>

	<!--处理好友邀请-->
	<update id="handleFriendInvite">
		UPDATE friend_invitations
		SET handle_time = #{handleTime},
			state       = #{state}
		WHERE id = #{id}
	</update>

	<!--获取邀请记录中的用户ID-->
	<!--<select id="getInvitationUsers"-->
	<!--		resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.GetInvitationUsersDTO">-->
	<!--	SELECT user_id as userId, friend_id as friendId-->
	<!--	FROM friend_invitations-->
	<!--	WHERE id = #{id}-->
	<!--</select>-->

	<!--添加好友记录-->
	<!--TODO 修改分组-->
	<insert id="addFriendRecord" parameterType="com.ETGroup.EfficientTalkServer.entity.DTO.social.AddFriendRecordDTO">
		INSERT INTO friends (record_id, user_id, friend_id, group_id, create_time)
		VALUES (#{userRecordId}, #{userId}, #{friendId}, #{userGroupId}, #{createTime})
		<if test="!userId.equals(friendId)">
			,
				(#{friendRecordId}, #{friendId}, #{userId}, #{friendGroupId}, #{createTime})
		</if>
	</insert>

	<!--删除好友-->
	<delete id="deleteFriend">
		DELETE
		FROM friends
		WHERE (user_id = #{userId} AND friend_id = #{friendId})
		   OR (friend_id = #{userId} AND user_id = #{friendId})
	</delete>

	<!--获取好友申请列表-->
	<select id="getFriendInvitationList"
			resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.FriendInvitationListItemDTO">
		SELECT friend_invitations.id          as invitationId,
			   friend_invitations.user_id     as senderId,
			   friend_invitations.friend_id   as receiverId,
			   users.username                 as friendName,
			   users.avatar                   as friendAvatar,
			   friend_invitations.message     as message,
			   friend_invitations.group_id    as groupId,
			   friend_invitations.invite_time as inviteTime,
			   friend_invitations.handle_time as handleTime,
			   friend_invitations.state       as state
		FROM friend_invitations
				 LEFT JOIN users ON users.id = friend_invitations.friend_id
		WHERE user_id = #{userId}
		UNION
		SELECT friend_invitations.id          as invitationId,
			   friend_invitations.user_id     as receiverId,
			   friend_invitations.friend_id   as senderId,
			   users.username                 as friendName,
			   users.avatar                   as friendAvatar,
			   friend_invitations.message     as message,
			   friend_invitations.group_id    as groupId,
			   friend_invitations.invite_time as inviteTime,
			   friend_invitations.handle_time as handleTime,
			   friend_invitations.state       as state
		FROM friend_invitations
				 LEFT JOIN users ON users.id = friend_invitations.user_id
		WHERE friend_id = #{userId}
		ORDER BY handleTime DESC
	</select>

	<!--检查是否存在关联记录,返回关联邀请记录-->
	<select id="checkRelativeInvitation" resultType="java.lang.String">
		SELECT friend_invitations.id
		FROM friend_invitations
		WHERE friend_invitations.user_id = #{userId}
		  AND friend_invitations.friend_id = #{friendId}
		  AND friend_invitations.state = 0
	</select>

	<!--获取邀请记录状态-->
	<select id="getInvitationState" resultType="java.lang.Integer">
		SELECT state
		FROM friend_invitations
		WHERE id = #{id}
	</select>

	<!--搜索新好友-->
	<select id="searchNewFriend" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.NewFriendBasicInfoDTO">
		SELECT users.id                                                                     as userId,
			   users.username                                                               as userName,
			   users.avatar                                                                 as userAvatar,
			   users.dept_id                                                                as deptId,
			   departments.dept_name                                                        as deptName,
			   users.job_id                                                                 as jobId,
			   jobs.job_name                                                                as jobName,
			   users.sex                                                                    as sex,
			   EXISTS(SELECT 1
					  FROM friends
					  WHERE (friends.user_id = #{userId} AND friends.friend_id = users.id)
						 OR (friends.user_id = users.id AND friends.friend_id = #{userId})) as isFriend
		FROM users
				 LEFT JOIN departments ON users.dept_id = departments.dept_id
				 LEFT JOIN jobs ON users.job_id = jobs.job_id
		WHERE users.id = #{searchKey}
		   OR users.username LIKE CONCAT('%', #{searchKey}, '%')
		LIMIT #{pageSize}
		<bind name="pageOffset" value="(pageIndex - 1) * pageSize"/>
		OFFSET #{pageOffset}
	</select>

	<!--检查是否为好友-->
	<select id="checkIsFriend" resultType="java.lang.Integer">
		SELECT 1
		FROM friends
		WHERE (friends.user_id = #{userId} AND friends.friend_id = #{friendId})
		   OR (friends.user_id = #{friendId} AND friends.friend_id = #{userId})
	</select>

	<!--获取指定用户的好友分组-->
	<select id="getUserFriendGroups" resultType="com.ETGroup.EfficientTalkServer.entity.PO.FriendGroupPO">
		SELECT group_id as groupId, group_name as groupName, user_id as userId
		FROM friend_groups
		WHERE user_id = 'SYSTEM'
		   OR user_id = #{userId}
	</select>

	<!--获取组织树中的部门节点-->
	<select id="getOrgTreeDeptNodeList"
			resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.OrgTreeDeptNodeDTO">
		SELECT departments.id        as id,
			   departments.dept_id   as deptId,
			   departments.dept_name as deptName,
			   departments.parent_id as parentId,
			   departments.level     as level,
			   departments.tag       as tag
		FROM departments
		<where>
			departments.org_id = #{orgId}
			<if test="parentId != null and parentId != ''">
				AND departments.parent_id = #{parentId}
			</if>
			<if test="parentId == null or parentId == ''">
				AND departments.parent_id IS NULL
			</if>
		</where>
		ORDER BY departments.sort_order
	</select>

	<!--获取组织树中的用户节点-->
	<select id="getOrgTreeUserNodeList"
			resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.OrgTreeUserNodeDTO">
		SELECT users.id              as userId,
			   users.username        as userName,
			   users.avatar          as userAvatar,
			   users.dept_id         as deptId,
			   users.job_id          as jobId,
			   jobs.job_name         as jobName,
			   departments.dept_name as deptName
		FROM users
				 LEFT JOIN departments ON departments.dept_id = users.dept_id
				 LEFT JOIN jobs ON jobs.job_id = users.job_id
		<where>
			users.org_id = #{orgId}
			<if test="parentId != null and parentId != ''">
				AND users.dept_id = #{parentId}
			</if>
			<if test="parentId == null or parentId == ''">
				AND users.dept_id IS NULL
			</if>
		</where>
	</select>

	<!--获取组织信息-->
	<select id="getOrganizationInfo" resultType="com.ETGroup.EfficientTalkServer.entity.PO.OrganizationPO">
		SELECT organizations.org_id   as orgId,
			   organizations.org_name as orgName,
			   organizations.org_logo as orgLogo,
			   organizations.disk_id  as diskId
		FROM organizations
		WHERE organizations.org_id = #{orgId}
	</select>

	<!--获取群聊列表-->
	<select id="getChatGroupList" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.ChatGroupListItemDTO">
		SELECT chat_group.group_id   as groupId,
			   chat_group.group_name as groupName,
			   chat_group.creator    as creator
		FROM chat_group_member
				 LEFT JOIN chat_group ON chat_group.group_id = chat_group_member.group_id
		WHERE chat_group_member.user_id = #{userId}
	</select>

	<!--获取群聊成员ID列表-->
	<select id="getChatGroupMemberIdList" resultType="java.lang.String">
		SELECT user_id
		FROM chat_group_member
		WHERE group_id = #{groupId}
	</select>

	<!--获取群聊基本信息-->
	<select id="getChatGroupBasicInfo" resultType="com.ETGroup.EfficientTalkServer.entity.PO.ChatGroupPO">
		SELECT *
		FROM chat_group
		WHERE group_id = #{groupId}
	</select>

	<!--获取群聊成员列表-->
	<select id="getChatGroupMemberList"
			resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.ChatGroupMemberListItemDTO">
		SELECT users.id               as userId,
			   users.username         as userName,
			   users.avatar           as userAvatar,
			   organizations.org_id   as orgId,
			   organizations.org_name as orgName,
			   departments.dept_id    as deptId,
			   departments.dept_name  as deptName,
			   jobs.job_id            as jobId,
			   jobs.job_name          as jobName
		FROM chat_group_member
				 LEFT JOIN users ON users.id = chat_group_member.user_id
				 LEFT JOIN organizations ON organizations.org_id = users.org_id
				 LEFT JOIN departments ON departments.dept_id = users.dept_id
				 LEFT JOIN jobs ON jobs.job_id = users.job_id
		WHERE group_id = #{groupId}
	</select>

	<!--退出群聊-->
	<delete id="removeChatGroupMember">
		DELETE
		FROM chat_group_member
		WHERE user_id = #{userId}
		  AND group_id = #{groupId}
	</delete>

	<!--根据名称获取组织成员列表-->
	<select id="getOrgMemberListByName"
			resultType="com.ETGroup.EfficientTalkServer.entity.DTO.social.OrgTreeUserNodeDTO">
		SELECT users.id              as userId,
			   users.username        as userName,
			   users.avatar          as userAvatar,
			   users.dept_id         as deptId,
			   departments.dept_name as deptName,
			   users.job_id          as jobId,
			   jobs.job_name         as jobName
		FROM users
				 LEFT JOIN departments ON departments.dept_id = users.dept_id
				 LEFT JOIN jobs ON jobs.job_id = users.job_id
		WHERE username LIKE CONCAT('%', #{searchKey}, '%')
		  AND users.org_id = #{orgId}
	</select>

	<!--创建群聊-->
	<insert id="createChatGroup">
		INSERT INTO chat_group (group_id, group_name, org_id, creator, create_time)
		VALUES (#{groupId}, #{groupName}, #{orgId}, #{creator}, #{createTime})
	</insert>

	<!--添加群聊成员-->
	<insert id="addChatGroupMember">
		INSERT INTO chat_group_member (id, group_id, user_id, create_time)
		VALUES (#{id}, #{groupId}, #{userId}, #{createTime})
	</insert>

	<!--创建新的组织-->
	<insert id="createOrganization">
		INSERT INTO organizations (org_id, org_name, org_logo, disk_id, create_time, owner)
		VALUES (#{orgId}, #{orgName}, #{orgLogo}, #{diskId}, NOW(), #{owner})
	</insert>

	<!--判断组织ID是否存在-->
	<select id="checkOrgIdExist" resultType="java.lang.Integer">
		SELECT EXISTS(SELECT 1
					  FROM organizations
					  WHERE LOWER(org_id) = #{orgId})
	</select>

	<!--创建部门-->
	<insert id="createDepartment">
		INSERT INTO departments (id, dept_id, dept_name, org_id, parent_id, level, tag, sort_order, admin)
		VALUES (#{id}, #{deptId}, #{deptName}, #{orgId}, #{parentId}, #{level}, #{tag}, #{sortOrder}, #{admin})
	</insert>
</mapper>