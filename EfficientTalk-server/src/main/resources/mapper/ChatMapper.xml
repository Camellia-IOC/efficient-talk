<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ETGroup.EfficientTalkServer.mapper.ChatMapper">
	<!--保存聊天记录-->
	<insert id="saveChatHistory" parameterType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		INSERT INTO chat_history (id, sender, receiver, type, file_id, content, send_time)
		VALUES (#{id}, #{sender}, #{receiver}, #{type}, #{fileId}, #{content}, #{time})
	</insert>

	<!--缓存聊天记录-->
	<insert id="cacheChatHistory" parameterType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		INSERT INTO chat_history_cache (id, sender, receiver, type, file_id, content, send_time)
		VALUES (#{id}, #{sender}, #{receiver}, #{type}, #{fileId}, #{content}, #{time})
	</insert>

	<!--获取缓存的聊天记录-->
	<select id="getChatHistoryCache" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		SELECT chat_history_cache.id                         as id,
			   chat_history_cache.sender  as sender,
			   chat_history_cache.receiver                   as receiver,
			   chat_history_cache.type                       as type,
			   chat_history_cache.file_id as fileId,
			   chat_files.file_name       as fileName,
			   chat_files.file_type       as fileType,
			   chat_files.file_size       as fileSize,
			   chat_history_cache.content                    as content,
			   chat_history_cache.send_time                  as time
		FROM chat_history_cache
				 LEFT JOIN chat_files ON chat_history_cache.file_id = chat_files.file_id
		WHERE chat_history_cache.receiver = #{userId}
		ORDER BY send_time
	</select>

	<!--删除缓存的聊天记录-->
	<delete id="deleteChatHistoryCache">
		DELETE
		FROM chat_history_cache
		WHERE receiver = #{userId}
	</delete>

	<!--获取聊天记录-->
	<select id="getChatHistory" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		SELECT chat_history.id        as id,
			   chat_history.sender    as sender,
			   chat_history.receiver  as receiver,
			   chat_history.type      as type,
			   chat_history.file_id   as fileId,
			   chat_files.file_name   as fileName,
			   chat_files.file_type   as fileType,
			   chat_files.file_size   as fileSize,
			   chat_history.content   as content,
			   chat_history.send_time as time
		FROM chat_history
				 LEFT JOIN chat_files ON chat_history.file_id = chat_files.file_id
		WHERE (chat_history.sender = #{userId} AND chat_history.receiver = #{friendId})
		   OR (chat_history.receiver = #{userId} AND chat_history.sender = #{friendId})
		ORDER BY send_time
	</select>

	<!--保存对话列表-->
	<insert id="saveChatList"
			parameterType="com.ETGroup.EfficientTalkServer.entity.request.chat.SaveChatListRequestParam">
		INSERT INTO chat_list (user_id, chat_list)
		VALUES (#{userId}, #{ChatListJson})
		ON DUPLICATE KEY
			UPDATE user_id   = #{userId},
				   chat_list = #{ChatListJson}
	</insert>

	<!--获取对话列表-->
	<select id="getChatList" resultType="com.ETGroup.EfficientTalkServer.entity.PO.ChatListPO">
		SELECT user_id   as userId,
			   chat_list as chatList
		FROM chat_list
		WHERE user_id = #{userId}
	</select>

	<!--保存聊天文件-->
	<insert id="uploadChatFile" parameterType="com.ETGroup.EfficientTalkServer.entity.PO.ChatFilePO">
		INSERT INTO chat_files (file_id, file_name, file_path, file_type, file_size, sender, receiver, create_time)
		VALUES (#{fileId}, #{fileName}, #{filePath}, #{fileType}, #{fileSize}, #{sender}, #{receiver}, #{createTime})
	</insert>
</mapper>