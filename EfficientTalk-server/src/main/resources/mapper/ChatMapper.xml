<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ETGroup.EfficientTalkServer.mapper.ChatMapper">
	<!--保存聊天记录-->
	<insert id="saveChatHistory" parameterType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		INSERT INTO chat_history (id, sender, receiver, type, file_id, content, send_time)
		VALUES (#{id}, #{sender}, #{receiver}, #{type}, #{fileId}, #{content}, #{time})
	</insert>

	<!--缓存聊天记录-->
	<insert id="cacheChatHistory" parameterType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		INSERT INTO chat_history_cache (id, sender, receiver, type, file_id, content, send_time)
		VALUES (#{id}, #{sender}, #{receiver}, #{type}, #{fileId}, #{content}, #{time})
	</insert>

	<!--获取缓存的聊天记录-->
	<select id="getChatHistoryCache" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		SELECT chat_history_cache.id        as id,
			   chat_history_cache.sender    as sender,
			   chat_history_cache.receiver  as receiver,
			   chat_history_cache.type      as type,
			   chat_history_cache.file_id   as fileId,
			   chat_files.file_name         as fileName,
			   chat_files.file_type         as fileType,
			   chat_files.file_size         as fileSize,
			   chat_history_cache.content   as content,
			   chat_history_cache.send_time as time
		FROM chat_history_cache
				 LEFT JOIN chat_files ON chat_history_cache.file_id = chat_files.file_id
		WHERE chat_history_cache.receiver = #{userId}
		ORDER BY send_time
	</select>

	<!--删除缓存的聊天记录-->
	<delete id="deleteChatHistoryCache">
		DELETE
		FROM chat_history_cache
		WHERE receiver = #{userId}
	</delete>

	<!--获取聊天记录-->
	<select id="getChatHistory" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		SELECT chat_history.id        as id,
			   chat_history.sender    as sender,
			   chat_history.receiver  as receiver,
			   chat_history.type      as type,
			   chat_history.file_id   as fileId,
			   chat_files.file_name   as fileName,
			   chat_files.file_type   as fileType,
			   chat_files.file_size   as fileSize,
			   chat_history.content   as content,
			   chat_history.send_time as time
		FROM chat_history
				 LEFT JOIN chat_files ON chat_history.file_id = chat_files.file_id
		<where>
			((chat_history.sender = #{userId} AND chat_history.receiver = #{friendId})
				OR (chat_history.receiver = #{userId} AND chat_history.sender = #{friendId}))
			<if test="lastTime != null">
				AND send_time &lt; #{lastTime}
			</if>
		</where>
		ORDER BY send_time DESC
		LIMIT #{pageSize}
	</select>

	<!--保存对话列表-->
	<insert id="saveChatList"
			parameterType="com.ETGroup.EfficientTalkServer.entity.request.chat.SaveChatListRequestParam">
		INSERT INTO chat_list (user_id, chat_list)
		VALUES (#{userId}, #{ChatListJson})
		ON DUPLICATE KEY
			UPDATE user_id   = #{userId},
				   chat_list = #{ChatListJson}
	</insert>

	<!--获取对话列表-->
	<select id="getChatList" resultType="com.ETGroup.EfficientTalkServer.entity.PO.ChatListPO">
		SELECT user_id   as userId,
			   chat_list as chatList
		FROM chat_list
		WHERE user_id = #{userId}
	</select>

	<!--保存聊天文件-->
	<insert id="uploadChatFile" parameterType="com.ETGroup.EfficientTalkServer.entity.PO.ChatFilePO">
		INSERT INTO chat_files (file_id, file_name, file_path, file_type, file_size, sender, receiver, create_time)
		VALUES (#{fileId}, #{fileName}, #{filePath}, #{fileType}, #{fileSize}, #{sender}, #{receiver}, #{createTime})
	</insert>

	<!--保存聊天图片-->
	<insert id="uploadChatImage" parameterType="com.ETGroup.EfficientTalkServer.entity.PO.ChatImagePO">
		INSERT INTO chat_images (image_id, image_name, image_path, image_type, image_size, sender, receiver,
								 create_time)
		VALUES (#{imageId}, #{imageName}, #{imagePath}, #{imageType}, #{imageSize}, #{sender}, #{receiver},
				#{createTime})
	</insert>

	<!--获取聊天文件列表-->
	<select id="getChatFileList" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatFileListItemDTO">
		SELECT chat_files.file_id     as fileId,
			   chat_files.file_name   as fileName,
			   chat_files.file_type   as fileType,
			   chat_files.file_size   as fileSize,
			   chat_files.sender      as sender,
			   users.username         as senderName,
			   chat_files.create_time as createTime
		FROM chat_files
				 LEFT JOIN users ON chat_files.sender = users.id
		WHERE chat_files.sender = #{userId}
		   OR chat_files.receiver = #{userId}
		LIMIT #{pageSize}
		<bind name="pageOffset" value="(pageIndex - 1) * pageSize"/>
		OFFSET #{pageOffset}
	</select>

	<!--获取聊天文件总数-->
	<select id="getChatFileTotal" resultType="java.lang.Integer">
		SELECT COUNT(*) as total
		FROM chat_files
		WHERE chat_files.sender = #{userId}
		   OR chat_files.receiver = #{userId}
	</select>

	<!--分类获取聊天记录-->
	<select id="getChatHistoryByType" resultType="com.ETGroup.EfficientTalkServer.entity.DTO.chat.ChatRecordDTO">
		SELECT chat_history.id       as id,
			   chat_history.sender   as sender,
			   chat_history.receiver as receiver,
			   chat_history.type     as type,
			   chat_history.file_id  as fileId,
		<if test="type == 'image/video' or type == 'all'">
			chat_images.image_name as imageName,
			chat_images.image_type as imageType,
			chat_images.image_size as imageSize,
		</if>
		<if test="type == 'file' or type == 'all'">
			chat_files.file_name as fileName,
			chat_files.file_type as fileType,
			chat_files.file_size as fileSize,
		</if>
		chat_history.content   as content,
		chat_history.send_time as time
		FROM chat_history
		<if test="type == 'image/video' or type == 'all'">
			LEFT JOIN chat_images ON chat_history.file_id = chat_images.image_id
		</if>
		<if test="type == 'file' or type == 'all'">
			LEFT JOIN chat_files ON chat_history.file_id = chat_files.file_id
		</if>
		<where>
			((chat_history.sender = #{userId} AND chat_history.receiver = #{friendId})
				OR (chat_history.receiver = #{userId} AND chat_history.sender = #{friendId}))
			<if test="type == 'all' and (searchKey != null and searchKey != '')">
				AND chat_history.content LIKE CONCAT('%', #{searchKey}, '%')
			</if>
			<if test="type == 'image/video'">
				AND (chat_history.type = 'image' OR chat_history.type = 'video')
				<if test="searchKey != null and searchKey != ''">
					AND chat_images.image_name LIKE CONCAT('%', #{searchKey}, '%')
				</if>
			</if>
			<if test="type == 'file'">
				AND chat_history.type = 'file'
				<if test="searchKey != null and searchKey != ''">
					AND chat_files.file_name LIKE CONCAT('%', #{searchKey}, '%')
				</if>
			</if>
			<if test="lastTime != null">
				AND send_time &lt; #{lastTime}
			</if>
		</where>
		ORDER BY send_time DESC
		LIMIT #{pageSize}
	</select>
</mapper>